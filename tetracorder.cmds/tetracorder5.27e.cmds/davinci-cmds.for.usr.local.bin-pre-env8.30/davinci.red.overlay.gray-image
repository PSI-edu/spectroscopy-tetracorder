#!/usr/local/bin/davinci -f

#######!/usr/bin/env -S davinci -f  


verbose=0
###############################################################################
#
# Davinci Program to put red, green and blue overlay maps onto a gray-scale base image
#
# Roger N. Clark, USGS  12/28/2011

# input:              1          2         3       4      5         6         7       8       9        10         11      12
#         program input_file1  factor grayimage  band gfactor  output_file  -gamma -zero  -gammag  -ignore0  -baseonly isis|vicar|tiff
#         program input_file1    1.0  cup.rtgc    20    0.02   output_file  -gamma

# Example:
#
# davinci.red.overlay.gray-image group.2um/kaolwxl.fd.gz -20 \
# 			../cubes/cuprite95-beta-intel_rtgc 20 0 \
# 			cuprite.r=kaolwxl.on.ch20 -gamma
#
# gfactor = scaling the gray scale image.  0 = autoscale, 1 = no scaling <0 other scaling
# but 2022/09: made the grayt scale image by another program, so no need to scale or extract from cube.

# NOTE: isis/vicar/tiff output not yet coded

if ($argc < 7) {
	printf("Insufficient input\n\n")
        printf("davinci.red.overlay.gray-image input_file1 factor grayimage band factor  output_file  [-gamma] [-zero] [-dual] [-baseonly] [-gammag] [-ignore0] [isis|vicar|tiff]\n\n")
	printf("   scale factor of zero means auto-scale\n")
	printf("   scale factor  < zero means auto-scale to max of abs(scale factor) (suggest -25 for tetracorder mineral maps)\n")
	printf("   -zero means no output if input_file1 is all zeros\n")
	printf("exit 1\n")
        exit(1)
}

gflag=0             # do gamma on maps
gflagg=0             # do gamma on gray image
isisflg=0           # do isis
vicarflg=0          # do vicaro
tiffflg=0           # do tiff
zeroflg=0           # if=1 not output if map is all zeros
baseflg=0           # output the base image only
dualflg=0           # dual side by side images
ignore0=0           # ignore values <= 0 when stretching if =1  always does this at the moment

if ($argc > 6) {
	for (i=7; i<=$argc; i=i+1) {
		atmp=$argv[i]

		if (atmp == "-gamma" || atmp == "gamma") {     # do gamma correction on maps
			gflag=1
			printf("doing gamma stretch of image maps\n")

		} else if (atmp == "-gammag" || atmp == "gammag") {     # do gamma correction on gray image
			gflagg=1

		} else if (atmp == "-ignore0" || atmp == "ignore0") {     # ignore values <= 0 when stretching
			ignore0=1

		} else if (atmp == "-zero" || atmp == "zero") {

			zeroflg=1

		} else if (atmp == "-baseonly" || atmp == "baseonly") {

			baseflg=1

		} else if (atmp == "-dual" || atmp == "dual") {

			dualflg=1

		} else if (atmp == "-isis" || atmp == "isis") {

			isisflg=1

		} else if (atmp == "-vicar" || atmp == "vicar") {

			vicarflg=1

		} else if (atmp == "-tiff" || atmp == "tiff") {

			tiffflg=1

		} else {

			printf("flag not recognized: %s\n",atmp)
			printf("exit 1\n")
			exit(1)
		}
	}
}

aband=atoi($4)           # band number
if (aband <= 0) {
	printf("Error: invalid band number: %d\n", aband)
	printf("exit 1\n")
	exit(1)
}

a1=read(filename=$1)  # file 1  this is the image to be colored and put on the gray scale image

a1=bsq(a1)

dima1=dim(a1)  # image size
printf ("results image size = %d, %d pixels\n", dima1[1,,], dima1[2,,])

ascale1=atof($2)  # scale factor1

printf("overlay image stats before scaling:\n")
x=moment(a1)
printf("a1:     min=%f  max=%f  mean=%f\n", x[1,,], x[2,,], x[3,,])

# the scale factor assumes the factor scales the data to the 0 to 255 range
	
if (abs(ascale1) < 0.000001) {       # autoscale 

	x=moment(a1)              # min, max, mean, ...
	if (x[2,,] > 0.000001) {  # data large enough to scale, otherwise do nothing
		a1=255.0*float(a1)/x[2,,]
	}

} else if ( ascale1 <= -0.000001) {   # autoscale with limit

	x=moment(a1)              # min, max, mean, ...
	if (x[2,,] < abs(ascale1)) {  # data large enough to scale, otherwise do nothing
		ascale1 = 255.0/abs(ascale1)
		a1=float(a1)*ascale1
	}

} else {                             # straight scale
	a1=float(a1)* ascale1
}

printf("overlay image stats after scaling:\n")
x=moment(a1)
printf("a1:     min=%f  max=%f  mean=%f\n", x[1,,], x[2,,], x[3,,])

omax=x[2,,]  # max value in overlay image

# Check if image values are too low.
# at this point (after scaling), even if we gamma scale after this,
# a value of 0.15 of less will come out less than 1 (on a 0 to 255 scale)
# so the output image would be blank.

if ( zeroflg == 1 && omax < 0.1 ) {

	printf("Map image (file1) is all zeros.  Nothing to overlay.  Quitting\n")
	printf("exit 1\n")
	exit(1)
}

#### Now extrach the band for the base gray scale  image

agray=read(filename=$3, record=aband)  # gray scale image
agray=bsq(agray)

agray[ where (agray > 32000) ] = 0    # added 3/25/2020 - RNC

dimagray=dim(agray)  # image size
printf ("     gray scale image: %s\n", $3)
printf ("     gray scale image size = %d, %d pixels, %s\n", dimagray[1,,], dimagray[2,,], $3)

agraymon = moment(agray)
printf ("     gray scale image stats: min= %f   max=%f   mean= %f\n", agraymon[1,1,1], agraymon[2,1,1], agraymon[3,1,1])

ascaleg=atof($5)                       # scale factor to gray scale image

gout=$6          # output file name base

xg=moment(agray)   # stats for input gray scale image
agray2 = agray     # the gray image, that will be stretched

# the scale factor assumes the factor scales the data to the 0 to 255 range

if (abs(ascaleg) < 0.000001) {       # autoscale with histogram clip stretch

	printf("histogram clip autoscaling the gray image\n")
	agray2=agray2[ where (agray2 < 0) ] = 0     # reset negatives to zero

	chist=histogram(agray2, start=0.0, size=0.0025, steps=400)
	#for (i=1; i<=400; i++) {
	#	printf ("%10.4f   %f\n", chist[1,i,1], chist[2,i,1])
	#}

	# ignore vrey low values < 0.0050 and  high > 0.97
	chsum = sum(chist[2,3:389,1])

	lowcliplevel  = 0.01  # clip level (e.g. 1%)
	highcliplevel = 0.02  # clip level (e.g. 1%)

	imin = 3
	lowsum=0.0
	lowtarget = chsum * lowcliplevel

	for (i=3; i<=389; i++) {
		lowsum = lowsum + chist[2,i,1]  # add histogram bin
		if (lowsum >= lowtarget) {

			imin = i   # low clip level
			break
		}
	}
	if (imin < 3) {
		imin = 3
	}

	ymin = chist[1,imin,1]   # minimum for outpuit image

	printf("low clip level= %f   (histogram bin %d)\n", ymin, imin)

	imax=0
	highsum=0.0

	hightarget = chsum * (1.0-highcliplevel)

	for (i=3; i<=389; i++) {
		highsum = highsum + chist[2,i,1]  # add histogram bin
		if ( highsum >= hightarget) {

			imax=i    # high clip level
			break
		}
	}
	if (imax < 1) { 
		imax = 389
	}

	ymax = chist[1,imax,1]   # maximum for output image

	printf("high clip level= %f   (histogram bin %d)\n", ymax, imax)

	agray = 255. * ( agray2 - ymin) / ((1.0 - ymin) / ymax)



#       ############################################
} else if ( ascaleg <= -0.000001) {   # autoscale with limit

	printf("autoscaling the gray image\n")
	agray2=agray2[ where (agray2 < 0) ] = 0     # reset negatives to zero
	x2=moment(agray2)              # min, max, mean, ...
	xmean=x2[3,,]
	agray2=agray2[ where (agray2 < 0.000001) ] = xmean   # reset zeros to mean for better statistics
	x2m=moment(x2)
	xmin=x2m[1,,]             # better minimum in the image data
	xagray = agray - (0.975 * xmin)  # subtract off most of base level
	x=moment(xagray)   # subtract off most of base level
	if (x2[2,,] < abs(ascaleg)) {  # data large enough to scale, otherwise do nothing
		ascaleg = 255/abs(ascaleg)
		agray=float(xagray)*ascaleg
	}

} else {                             # straight scale
	printf("linear scaling the gray image by %f\n", ascaleg)
	agray=float(agray) * ascaleg
}


# The gamma stretch equation assumes the data have been scaled from 0 to 255.

# now do gamma-stretched gif image of data scaled 0 to 255:
# a simple gamma stretch of image "a" is: a*10*0.1^((a/255)^0.5)
# but this saturates too soon, so a better alternative:
# b=a*7.5 *0.08^((a/400)^0.5)    # RNC 12/08/2008

if (gflag == 1) {  # gamma correction on maps

		printf("creating gamma-stretched overlay image %s\n", gout)
		# note, with 400 and not 400.0, when a <400, a/400=0
		#a= a*7.5 *0.08^((a/400)^0.5)
		a1= a1*7.5 *0.08^((a1/400.0)^0.5)    # RNC 07/09/2021
}

if (gflagg == 1) {  # gamma correction on gray image
		printf("creating gamma-stretched base image %s\n", gout)
		agray= agray*7.5 *0.08^((agray/400.0)^0.5)
}

# convert to all byte images

a1=byte(a1)
agray=byte(agray)

printf("     base image stats after scaling:\n")
x=moment(agray)
printf("     agray:  min=%f  max=%f  mean=%f\n", x[1,,], x[2,,], x[3,,])

# now combine images, a1=red on top, a2= green, a3=blue, agray on bottom

b=agray
a=cat(agray,b,axis=z)
a=cat(a,b,axis=z)  # now have a 3-band image.

azero=byte(a1*0)   # image of zeros

# red: RGB = 255. 25, 0
b=byte(a1/10)  # a1 green channel is better if not zero (otherwise red is too red)
ared=cat(a1,b,axis=z)
ared=cat(ared, azero, axis=z)
aredmask=ared
aredmask[,,2]=ared[,,1]
aredmask[,,3]=ared[,,1]   # mask with all channels = same
#write(ared,filename="ared.jpg",type=jpg)

# we now have an RGB (3-band) array

#add blue, then green, then red images to gray image:

if ( baseflg == 1 ) {
	goutf=gout + ".base.jpg"
	printf ("writing gray image result: jpg format\n")
	write(a,filename=goutf,type=jpg)
	exit(0)
}

# combine RGB overlay red image (ared) with gray base image (a)

a[ where(aredmask > 0) ] = ared

a=bsq(a)
aredmask=bsq(aredmask)   # this is really a gray-scale image

if (dualflg == 1)  {   # make dual side by side iamges of bas+red on left, and clear on black on right

	agap=a[1:3,,]*0   # 3 pixel image for a gap
	a=cat(a,agap,axis=x)       # add gap
	a=cat(a,aredmask,axis=x)   # combined side by side images with 3-pixel gap

	if ( gflag == 1 ) {
		goutf=gout + ".dual.gstr.jpg"    # gamma stretched
	} else {
		goutf=gout + ".dual.lstr.jpg"    # linear stretched
	}
} else {
	if ( gflag == 1 ) {
		goutf=gout + ".gstr.jpg"    # gamma stretched
	} else {
		goutf=gout + ".lstr.jpg"    # linear stretched
	}
}

printf ("writing RGB on gray image results: jpg format %s\n", goutf)
write(a,filename=goutf,type=jpg)
