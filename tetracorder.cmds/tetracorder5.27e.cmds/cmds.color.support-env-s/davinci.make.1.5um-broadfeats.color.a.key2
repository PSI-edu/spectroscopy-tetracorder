#!/usr/bin/env -S davinci -f  
####!/usr/local/bin/davinci -f

###########################  was:  #!/usr/local/bin/davinci -f


#verbose=0

# execute this program in the same directory asthe source code below
source ("davinci.master.colors")

# 23 available colors:
# c_red      c_green          c_blue       c_yellow        c_magenta       c_cyan      c_armygreen  
# c_salmon   c_flesh          c_orange     c_deeppink      c_yellowgreen   c_lavender  c_bluegreen
# c_skyblue  c_paleseagreen   c_white      c_redpink       c_gold          c_mudyellow c_lightpink
# c_purple

# a purple/magenta to red 12 spectral color sequence:
#
# c_magenta c_purple c_blue c_skyblue c_cyan c_green c_armygreen c_yellow c_gold c_salmon c_orange c_re

###########################################################################

#if ( $argc < 4 ) {
#  printf ("^GERROR: insufficient arguments\n")
#  printf ("   davinci.make.1-color-key  red green blue outputfile [-ramp]\n\n")
#  printf ("example:\n\n")
#  printf ("   davinci.make.1-color-key  255 255   10   yellow.png -ramp\n")
#  exit(1)
#}
#
xramp=0
#if ( $argc >4 ) {
#
#	if ( $5 == "-ramp" ) {
#		xramp = 1
#	}
#}

# box
a=create(32,30,3, format=FLOAT, start=255.0, step=0.0)

whitebox = a/255.0    # white box 32 x 30 pixels, max =1.0

yblackspacer = byte(whitebox[,1:15,]*0)   # for vertical stack
xblackspacer = byte(whitebox[1:15,,]*0)   # for horizontal stack

xblackspacer = cat (xblackspacer, xblackspacer, axis=x)   # double width spacer

xaz = float(a)/255.0   # white box, floating point = 1.0

xramp=1  # in future, allow for no ramp
if (xramp == 1) {     # make ramp

	xf=0.94
	xaz[,10:30,] = xaz[,10:30,]*xf
	xaz[,11:30,] = xaz[,11:30,]*xf
	xaz[,12:30,] = xaz[,12:30,]*xf
	xaz[,13:30,] = xaz[,13:30,]*xf
	xaz[,14:30,] = xaz[,14:30,]*xf
	xaz[,15:30,] = xaz[,15:30,]*xf
	xaz[,16:30,] = xaz[,16:30,]*xf
	xaz[,17:30,] = xaz[,17:30,]*xf
	xaz[,18:30,] = xaz[,18:30,]*xf
	xaz[,19:30,] = xaz[,19:30,]*xf
	xaz[,20:30,] = xaz[,20:30,]*xf
	xaz[,21:30,] = xaz[,21:30,]*xf
	xaz[,22:30,] = xaz[,22:30,]*xf
	xaz[,23:30,] = xaz[,23:30,]*xf
	xaz[,24:30,] = xaz[,24:30,]*xf
	xaz[,25:30,] = xaz[,25:30,]*xf
	xaz[,26:30,] = xaz[,26:30,]*xf
	xaz[,27:30,] = xaz[,27:30,]*xf
	xaz[,28:30,] = xaz[,28:30,]*xf
	xaz[,29:30,] = xaz[,29:30,]*xf
	xaz[,30:30,] = xaz[,30:30,]*xf
}

framp = xaz  # gray ramp, floating point, 0 to 1.0
printf("framp=")
moment(framp)

# 23 available colors:
# c_red        c_green          c_blue          c_yellow        c_magenta       c_cyan 
# c_armygreen  c_salmon         c_flesh         c_orange        c_deeppink      c_yellowgreen
# c_lavender   c_skyblue        c_paleseagreen  c_white         c_redpink       c_gold
# c_mudyellow  c_lightpink      c_bluegreen     c_purple


##################
#  horizontal key, spacer = xblackspacer

# a blue to red 12 spectral color sequence:
#
# c_purple c_cyan c_skyblue c_blue c_flesh c_lavender c_magenta c_green c_yellowgreen c_yellow c_orange c_red

c= c_purple
xout = byte( whitebox * c * framp + 0.5 )   # starting point
xout = cat (xout, xblackspacer, axis=x)

c= c_cyan
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_skyblue
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_blue
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_green
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_yellowgreen
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_yellow
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
xout = cat (xout, xblackspacer, axis=x)

c= c_red
x=byte( whitebox * c * framp + 0.5 )
xout = cat (xout, x, axis=x)
#xout = cat (xout, xblackspacer, axis=x)

#####
xout = byte(xout)
fout="color-key-ramp-1.5um-broadfeats.2s.png"


adim=dim(xout)
if ( adim[1,,] > 5 || adim[2,,] > 5 ) {
	printf ("writing %s\n", fout)
	write (xout, filename=fout, type=png)
} else {
	printf ("not writing %s\n", fout)
	printf ("    image size < 6 pixels\n")
}
