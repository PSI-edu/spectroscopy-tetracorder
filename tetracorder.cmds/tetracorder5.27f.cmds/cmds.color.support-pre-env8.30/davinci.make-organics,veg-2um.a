#!/usr/local/bin/davinci -q -f
####!/usr/bin/env -S davinci -q -f  

###########################  was:  #!/usr/local/bin/davinci -q -f



# command line:
# prog    gray_base_image  prefix-file-name   [dual|nodual]

prog="davinci.make-organics,veg-2um.a"     # CHANGE THIS if program name changes

####################  Begin static: no need to change inything in this section ################

if ($argc < 2) {

        printf("Insufficient input\n")
        printf("%s input_gray_image  outputcolorimage\n", prog)
        printf("exit 1\n")
        exit(1)
}


dual    = 1     # default color + gray image 
dualmax = 2000  # no dual if width is greater than this

if ($argc >= 3) {

	if ( "$3" == "nodual" ) {
		dual = 0
	}
	if ( "$3" == "dual" ) {
		dual = 1
		dualmax = 999999 
	}
}


# read base gray image

gbase=read(filename=$1)
if (HasValue(gbase) ==0) {                   # check that read worked
      printf ("read ERROR on file: %s\n",$1)
      printf ("^GEXIT 1\n")
      exit(1)
}

# execute this program in the same directory asthe source code below
source ("cmds.color.support/davinci.master.colors")

# available colors:

# 22 available colors:
# c_red      c_green          c_blue       c_yellow        c_magenta       c_cyan      c_armygreen  
# c_salmon   c_flesh          c_orange     c_deeppink      c_yellowgreen   c_lavender  c_bluegreen
# c_skyblue  c_paleseagreen   c_white      c_redpink       c_gold          c_mudyellow c_lightpink
# c_purple

# a purple/magenta to red 12 spectral color sequence:
#
# c_magenta c_purple c_blue c_skyblue c_cyan c_green c_armygreen c_yellow c_gold c_salmon c_orange c_red

###########################################################################

define read_an_image(1,1) {

        # read a gray-scale image and convert to 3-bands

        afile = $1   # file to read
        printf ("reading file %s\n", afile)
        aaa=read(filename=afile)
        if (HasValue(aaa) ==0) {  # check that read worked
                printf ("read ERROR on file: %s\n",afile)
                printf ("setting to zero\n")
                aaa=0
        }
        qqq = cat(aaa,aaa,axis=z)  # make into 2-band image
        aaa = cat(aaa,qqq,axis=z)  # make into 3-band image

        return (aaa)

}  # end define



###################   begin custom section ##########################################


# first image:

# c_blue
a = read_an_image("group.2um/organic_vegetation-dry-grass-golden.fd.gif")    # change this to read an images so we can get dimensions.

        # set up output image xcolor:
        xcolor=float(a*0)
        xdim=dim(a)

        # now add the colors

c= c_yellow
xcolor= xcolor + a*( c /255.) *0.0   # sets up the output image


# available colors:
# c_red     c_green          c_blue       c_yellow        c_magenta       c_cyan          c_armygreen  
# c_salmon  c_flesh          c_orange     c_deeppink      c_yellowgreen   c_lavender  
# c_skyblue c_paleseagreen   c_white      c_redpink       c_gold          c_mudyellow     c_lightpink

# veg:
# group.2um/organic_vegetation-dry-grass-golden.fd.gif  c_yellow
# group.2um/organic_vegetation-dry-grass-long.fd.gif    c_yellow
# group.2um/organic_vegetation-dry-wood.fd.gif          c_yellow
# group.2um/organic_drygrass+.17Na-mont.fd.gif          c_yellow
# group.2um/organic_dry_long_grass-thick.fd.gif         c_yellow

# organics - aliphatic
# group.2um/organic_fiberglass-roofing.fd.gif           c_green
# group.2um/organic_green_plastic_tarp.fd.gif           c_green
# group.2um/organic_plastic.grnhs.roof.fd.gif           c_green

# group.2um/organic_plastic-hdpe.1.fd.gif               c_skyblue
# group.2um/organic_plastic-pete2.fd.gif                c_skyblue
# group.2um/organic_plastic-pete3.fd.gif                c_skyblue
# group.2um/organic_plastic-pete4.fd.gif                c_skyblue
# group.2um/organic_plastic-pete.fd.gif                 c_skyblue
# group.2um/organic_white_pvc_pipe.fd.gif               c_skyblue

# group.2um/organic_plastic-polystyrene.fd.gif          c_lavender
# group.2um/organic_plastic-tarp1.fd.gif                c_lavender

# group.2um/organic_plastic-vinyl.fd.gif                c_blue

# group.2um/organic_paint-1.fd.gif                      c_paleseagreen

# organics - alkanes     C single bond C
# organics - alkenes     C single double bond C, unsaturated hydrocarbons
# organics - alkynes     C single triple bond C, unsaturated hydrocarbons
# organics - aromatics   contain a 6-membered benzene ring structure 

#####    organic - soil mixtures, aromatics
# group.2um/organic_benzene+montswy.fd.gif          c_red
# group.2um/organic_unleaded.gas+montswy.fd.gif     c_red
# group.2um/organic_toluene+montswy.fd.gif          c_red

# group.2um/organic_tce+montswy.fd.gif              c_orange
# group.2um/organic_trichlor+montswy.fd.gif         c_orange        # alkene

#######################################################


# group.2um/organic_vegetation-dry-grass-golden.fd.gif  c_yellow
# group.2um/organic_vegetation-dry-grass-long.fd.gif    c_yellow
# group.2um/organic_vegetation-dry-wood.fd.gif          c_yellow
# group.2um/organic_drygrass+.17Na-mont.fd.gif          c_yellow
# group.2um/organic_dry_long_grass-thick.fd.gif         c_yellow

c= c_yellow

a = read_an_image("group.2um/organic_vegetation-dry-grass-golden.fd.gif")  # c_yellow
xcolor= xcolor + a*( c /255.)   # vegetation-dry-grass

a = read_an_image("group.2um/organic_vegetation-dry-grass-long.fd.gif")    # c_yellow
xcolor= xcolor + a*( c /255.)   # vegetation-dry-grass

a = read_an_image("group.2um/organic_vegetation-dry-wood.fd.gif")          # c_yellow
xcolor= xcolor + a*( c /255.)   # vegetation-dry-wood

a = read_an_image("group.2um/organic_drygrass+.17Na-mont.fd.gif")          # c_yellow
xcolor= xcolor + a*( c /255.)   # vegetation-dry+ montmorillonmite

a = read_an_image("group.2um/organic_dry_long_grass-thick.fd.gif")         # c_yellow
xcolor= xcolor + a*( c /255.)   # vegetation-dry-grass

# organics - aliphatic

# group.2um/organic_fiberglass-roofing.fd.gif           c_green
# group.2um/organic_green_plastic_tarp.fd.gif           c_green
# group.2um/organic_plastic.grnhs.roof.fd.gif           c_green

c= c_green

a = read_an_image("group.2um/organic_fiberglass-roofing.fd.gif")         # c_green
xcolor= xcolor + a*( c /255.)   # organic_fiberglass-roofing

a = read_an_image("group.2um/organic_green_plastic_tarp.fd.gif")         # c_green
xcolor= xcolor + a*( c /255.)   # organic_green_plastic_tarp

a = read_an_image("group.2um/organic_plastic.grnhs.roof.fd.gif")         # c_green
xcolor= xcolor + a*( c /255.)   # organic_plastic.grnhs.roof


# group.2um/organic_plastic-hdpe.1.fd.gif               c_skyblue
# group.2um/organic_plastic-pete2.fd.gif                c_skyblue
# group.2um/organic_plastic-pete3.fd.gif                c_skyblue
# group.2um/organic_plastic-pete4.fd.gif                c_skyblue
# group.2um/organic_plastic-pete.fd.gif                 c_skyblue
# group.2um/organic_white_pvc_pipe.fd.gif               c_skyblue

c= c_skyblue

a = read_an_image("group.2um/organic_plastic-hdpe.1.fd.gif")             # c_skyblue
xcolor= xcolor + a*( c /255.)   # organic_plastic-hdpe

a = read_an_image("group.2um/organic_plastic-pete2.fd.gif")              # c_skyblue
xcolor= xcolor + a*( c /255.)   # organic_plastic-pete2

a = read_an_image("group.2um/organic_plastic-pete3.fd.gif")              # c_skyblue
xcolor= xcolor + a*( c /255.)   #  organic_plastic-pete3

a = read_an_image("group.2um/organic_plastic-pete4.fd.gif")              # c_skyblue
xcolor= xcolor + a*( c /255.)   # organic_plastic-pete4

a = read_an_image("group.2um/organic_plastic-pete.fd.gif")               # c_skyblue
xcolor= xcolor + a*( c /255.)   # organic_plastic-pete

a = read_an_image("group.2um/organic_white_pvc_pipe.fd.gif")             # c_skyblue
xcolor= xcolor + a*( c /255.)   # organic_white_pvc_pipe


# group.2um/organic_plastic-polystyrene.fd.gif          c_lavender
# group.2um/organic_plastic-tarp1.fd.gif                c_lavender

c=c_lavender

a = read_an_image("group.2um/organic_plastic-polystyrene.fd.gif")        # c_lavender
xcolor= xcolor + a*( c /255.)   # organic_plastic-polystyrene

a = read_an_image("group.2um/organic_plastic-tarp1.fd.gif")              # c_lavender
xcolor= xcolor + a*( c /255.)   # organic_plastic-tarp1


# group.2um/organic_plastic-vinyl.fd.gif                c_blue

c= c_blue

a = read_an_image("group.2um/organic_plastic-vinyl.fd.gif")     # c_blue
xcolor= xcolor + a*( c /255.)   # organic_plastic-vinyl



# group.2um/organic_paint-1.fd.gif                         #   c_paleseagreen

c= c_paleseagreen

a = read_an_image("group.2um/organic_paint-1.fd.gif")      # c_paleseagreen
xcolor= xcolor + a*( c /255.)   # organic_paint-1


# group.2um/organic_tce+montswy.fd.gif              c_orange
# group.2um/organic_trichlor+montswy.fd.gif         c_orange        # alkene

c= c_orange

a = read_an_image("group.2um/organic_tce+montswy.fd.gif")          # c_orang
xcolor= xcolor + a*( c /255.)   # organic_tce+montswy

a = read_an_image("group.2um/organic_trichlor+montswy.fd.gif")     # c_orange
xcolor= xcolor + a*( c /255.)   # organic_trichlor+montswy


# group.2um/organic_benzene+montswy.fd.gif          c_red
# group.2um/organic_unleaded.gas+montswy.fd.gif     c_red
# group.2um/organic_toluene+montswy.fd.gif          c_red

c= c_red

a = read_an_image("group.2um/organic_benzene+montswy.fd.gif")        # c_red
xcolor= xcolor + a*( c /255.)   # organic_benzene+montswy

a = read_an_image("group.2um/organic_unleaded.gas+montswy.fd.gif")   # c_red
xcolor= xcolor + a*( c /255.)   # organic_unleaded.gas+montswy

a = read_an_image("group.2um/organic_toluene+montswy.fd.gif")        # c_red
xcolor= xcolor + a*( c /255.)   # organic_toluene+montswy




if (HasValue(xcolor) ==0) {

        printf ("%s: xcolor has no value\n", prog)
        printf ("EXIT 1\n")
        exit(1)
}





########### end custom, no need to change anything below this line ###############################

xout=byte(xcolor+0.5)   # output color image, byte
xout = bip(xout)
xdim=dim(xout)
xdimx=xdim[1,,]      # color image width

gbasedim=dim(gbase)
x=gbasedim[1,,]      # base image width

if (x > dualmax) {
        dual = 0
}

if ( dual == 1 ) {

        gbase = bip(gbase)
        xout = cat (xout, gbase, axis=x)
}


fout=$2


adim=dim(xout)
if ( adim[1,,] > 5 || adim[2,,] > 5 ) {
        printf ("writing %s\n", fout)
        write (xout, filename=fout, type=png)
} else {
        printf ("not writing %s\n", fout)
        printf ("    image size < 6 pixels\n")
}

