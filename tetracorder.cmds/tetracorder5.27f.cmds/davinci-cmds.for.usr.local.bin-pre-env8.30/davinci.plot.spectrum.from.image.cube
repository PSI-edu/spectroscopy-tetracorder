#!/usr/local/bin/davinci -f

######!/usr/bin/env -S davinci -f  

###########################  was:  #!/usr/local/bin/davinci -f

###################################################
# User:   rclark    
###################################################

#verbose = 0

#mydebug=0

# davinci.plot.spectrum.from.image.cube cubefilename x y

anerror=0  # no errors yet

if ( $argc <  3 )  {
	anerror = 1
}

iwaves = 0  # no wavelengths

ibox = 1    # pixel box = 1x1 pixels
xbox = 1
ybox = 1

iboxstep = 0   # do not step through spectra

xskip = 0   # skip x pixels
yskip = 0   # skip y pixels

contin  = 0   # do not remove continuum
csmooth = 0

maxclip = 999999999.0
minclip = -999999999.0

wavmin = -9999.0
wavmax = 99999.0

specwrite = 0 # no writing of extracted spectra to a specpr file

if ( $argc >= 3 ) {
	for (j = 4; j <= $argc; j = j +1 ) {

		if  ($argv[j] == "-waves" || $argv[j] == "waves") {

			j=j+1
			wavefile = $argv[j]
			j=j+1
			waverec  = atoi($argv[j])
			iwaves = 1  # waves in microns
		} else if  ($argv[j] == "-box" || $argv[j] == "box") {

			j=j+1
			xbox = atoi($argv[j])
			j=j+1
			ybox = atoi($argv[j])
			ibox = 2
		} else if  ($argv[j] == "-step" || $argv[j] == "step") {

			j=j+1
			timestep = atof($argv[j])    # time in seconds
			iboxstep = 1
			
		} else if  ($argv[j] == "-xskip" || $argv[j] == "xskip") {

			j=j+1
			xskip = atoi($argv[j])

		} else if  ($argv[j] == "-yskip" || $argv[j] == "yskip") {

			j=j+1
			yskip = atoi($argv[j])

		} else if  ($argv[j] == "-maxclip" || $argv[j] == "maxclip") {

			j=j+1
			maxclip = atof($argv[j])    # clip values greater than this

		} else if  ($argv[j] == "-minclip" || $argv[j] == "minclip") {

			j=j+1
			minclip = atof($argv[j])    # clip values smaller than this

		} else if  ($argv[j] == "-waverange" || $argv[j] == "waverange") {

			j=j+1
			wavmin = atof($argv[j])    # minimum wavelength to plot
			j=j+1
			wavmax = atof($argv[j])    # maximum wavelength to plot

		} else if  ($argv[j] == "-specwrite" || $argv[j] == "specwrite") {

			j=j+1
			specwritefile = $argv[j]
			specwrite = 1

		} else if  ($argv[j] == "-contin" || $argv[j] == "contin") {

			j=j+1
			csmooth = atoi($argv[j])
			contin  = 1

		} else {

			printf ("ERROR: option not recognized: %s\n", $argv[j])
			printf ("exit 1\n")
			exit (1)
		}
	}
}

if ( minclip >= maxclip ) {

	rintf ("Error, minclip >= maxclip\n")
	printf ("exit 1\n")
	exit (1)

}

if ( wavmin >= wavmax ) {

	rintf ("Error, minimum wavelength >= maximum wavelength\n")
	printf ("exit 1\n")
	exit (1)

}

if ( anerror > 0 ) {

	printf ("Error, insufficient input\n")
	printf ("Usage:\n")
	printf ("      davinci.plot.spectrum.from.image.cube   cubefilename   x y  -waves file rec  -box x y  -step time  -xskip npixels  -yskip npixels -maxclip value  -minclip value   -waverange  min max -contin n  -specwrite specprfilename \n")
	printf ("exit 1\n")
	exit (1)
}

define smoothspectrum (0,2) {

	# smooth a spectrum $1 by $2 channels

	cspec = $1
	cspecs = cspec  # is the returned smoothed spectrum

	nsmooth = $2

	dimcspec = dim(cspec)
	nch      = dimcspec[3,,]

	# printf ("DEBUG: smoothspectrum, channels = %d   nsmooth = %d\n", nch, nsmooth)

	for (i=1; i<=nch; i++) {

		i1 = i - nsmooth
		i2 = i + nsmooth
		if (i1 < 1)   i1 = 1
		if (i2 > nch) i2 = nch

		cspecs[,,i] = avg(cspec[,,i1:i2])
	}
	return (cspecs)

}

cfile = $1          # cube file name
x     = atoi($2)    # x
y     = atoi($3)    # y

x0 = x  # first x
y0 = y  # first y

xmax = x0 + xbox -1
ymax = y0 + ybox -1

cube = read(filename=cfile)

cdim = dim(cube)
xpix   = cdim[1,,]
ypix   = cdim[2,,]
nchans = cdim[3,,]

waves = read (filename=wavefile, record=waverec)

s = cube[x, y, ]

if (contin == 1) {    # do continuum removal

	scontin = smoothspectrum (s, csmooth)
	s = s / scontin   # continuum removed spectrum
}

ichan = float(s)*0.0
for (i=1; i<= nchans; i++) {   # array of channel numbers

	ichan[,,i] = float(i)
}

plotsizey =  800  # default plot size
plotsizex = 1000  # default plot size

atitle = cfile

if (iwaves == 0) {
	xvalues = ichan
} else {
	xvalues = waves
}

plot(s[1,1,], xaxis=xvalues[1,1,], label=sprintf("%s pixel= %d %d", atitle, x, y))

if (iwaves == 0) {
	plot("set xlabel \"Channel Number\"")
} else {
	plot("set xlabel \"Wavelength (microns)\"")
	if ( wavmin > -999.0 ) {

		printf ("wavelength range = %f %f\n", wavmin, wavmax)
		plot(sprintf("set xrange [%f:%f]", wavmin, wavmax))
	}
}
plot("set ylabel \"Reflectance\"")
if (minclip > -99.0) {

	plot(sprintf("set yrange [%f:%f]", minclip, maxclip))
}

plot(sprintf("set terminal wxt size %d, %d", plotsizex, plotsizey))
#plot(sprintf("set terminal x11 size %d, %d", plotsizex, plotsizey))
plot("replot")

if ( ibox > 1 ) {   #  Step through the spectra in the box

	xstep = 1 + xskip
	ystep = 1 + yskip

	#get the average spectrum
	nspectra = 0
	avspec = s * 0.0

	for (iy=y0;  iy <= ymax; iy=iy+ystep) {
		for (ix=x0;  ix <= xmax; ix=ix+xstep) {

			s = cube[ix, iy, ]
			if (contin == 1) {    # do continuum removal

				scontin = smoothspectrum (s, csmooth)
				s = s / scontin   # continuum removed spectrum
			}
			s[ where ( s < minclip ) ] = minclip
			s[ where ( s > maxclip ) ] = maxclip
			cube[ix, iy, ] = s

			avspec = avspec + s
			nspectra = nspectra +1

		}
	}
	avspec = avspec / float(nspectra)


	sleeptime = sprintf("sleep %f", timestep)
	system(sleeptime)
	for (iy=y0;  iy <= ymax; iy=iy+ystep) {
		for (ix=x0;  ix <= xmax; ix=ix+xstep) {

			s = cube[ix, iy, ]
			if (contin == 1) {    # do continuum removal

				scontin = smoothspectrum (s, csmooth)
				s = s / scontin   # continuum removed spectrum
			}

			plot(s[1,1,], xaxis=xvalues[1,1,], label=sprintf("%s pixel= %d %d", atitle, ix, iy),\
				avspec[1,1,], xaxis=xvalues[1,1,], label="Average Spectrum")
			system(sleeptime)

			if (specwrite > 0) {

				sptitle = sprintf ("image px py= %d %d           ", ix, iy)
				write (s, filename=specwritefile, title=sptitle, type=specpr)
			}
		}
	}

}

if (specwrite > 0) {

	sptitle = sprintf ("avg spectrum = %d pixels           ", nspectra )
	write (avspec, filename=specwritefile, title=sptitle, type=specpr)
}

system ("sleep 2000")
