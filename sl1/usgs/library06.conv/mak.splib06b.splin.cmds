#!/bin/sh

# makes the specpr commands for building the splib06a library
#
# Roger N. Clark  3/24/2004 to 02/06/2008

#echo "WARNING: this script assumes splib06a.list.1 is current"
#echo "         It should be newer than splib06a:"
#
# ll ../library06/splib06a splib06a.list.1
#
# spprint ../library06/splib06a > splib06a.list.1
# edit splib06a.list.1 and 
#            remove the done at the end of the file.
#            delete all lines except spectra and error bar records
#               vi
#                 :g/Characters of TEXT/d
#                 :g/FEATANL/d
#                 :g/errors to previous data/d
#                 :g/Placeholder for error bars/d
#                 delete waves and bandpass records
#                 delete done line at end of file.


#        11111111112222222222333333333344444444445555555555666666666677777777778
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
#   53  Acmite NMNH133746 Pyroxene   W1R1Ba AREF   480  15:18:47.00  03/23/1988
#   66  Actinolite HS116.3B          W1R1Bb AREF   480  08:41:01.00  07/11/1991


cmdfil=splib06b.splin.cmds
list=splib06a.list.1
tmp=tmpyy$$

if [ ! -f "$list" ]
then
	echo "ERROR: $list not found"
	exit 1
fi

##### create command file start

echo "c;c;c;c;c"      > $cmdfil   # sync protections
echo "==[FILEID]y"   >> $cmdfil   # y=splib06a file
echo "==[Fout]v"     >> $cmdfil   # v=splib06b output

# now parse master LIST file, one line at a time

tlines=`wc -l $list | awk '{ print $1 }'`   # total lines in file

##### initialize variables
sptype=' '
wava=0
wavb=0

spur1='0'  # spectral purity 1
spur2='0'  # spectral purity 2
spur3='0'  # spectral purity 3
spur4='0'  # spectral purity 4

aline=0  # line counter

while [ "$aline" -lt "$tlines" ]     # start loop
do
        aline=`expr $aline + 1`

        oneline=`head -$aline $list | tail -1`

        head -$aline $list | tail -1 > $tmp

        x=`echo $oneline | grep -v '^#'`
        if [ ! -z "$x" ]
        then
		# parse fields

		srec=`echo $oneline | awk '{ print $1 }'`                     # specpr record number
		stitl=`cut -c 9-48 $tmp`                                      # specpr title
		stitl2=`cut -c 9-48 $tmp | sed -e 's/ /\\ /g'`                # specpr title

		stitlc=`cut -c 9-37 $tmp`
		Ttitle=${stitlc}'   DESCRIPT'
		Tfeat=${stitlc}'    FEATANL'

		achans=`cut -c 50-54 $tmp`       # number of channels

		sptype=`cut -c 38-42 $tmp`      # spectrometer range and wavelength set indicator

		#echo 'DEBUG 1'

# Possible alignments of fields:
#   77  Acmite NMNH133746 Pyroxene   W1R1Ba AREF   480  15:18:47.00  03/23/1988
#   79  errors to previous data                    480  15:18:47.00  03/23/1988
#  119  Actinolite HS22.3B         W9R4Nbbb RREF  4280  19:51:17.00  07/06/1993
#  131  Placeholder for error bars                4280  19:51:17.00  07/06/1993
#        11111111112222222222333333333344444444445555555555666666666677777777778
#2345678901234567890123456789012345678901234567890123456789012345678901234567890

                # currently three possibilities for spectral range fields: two W positions and error bars

		ee=`grep 'errors to previous' $tmp`
		ep=`grep 'Placeholder for error' $tmp`

		if [ ! "$ee" -a ! "$ep" ]
		then
			wava=`cut -c 38-38 $tmp`      # Wavelength range 1, 2 would be here
			resa=`cut -c 40-40 $tmp`      # Resolution range 1, 2 would be here

			wavb=`cut -c 36-36 $tmp`      # Wavelength range 5, 9 would be here
			resb=`cut -c 38-38 $tmp`      # Resolution range 5, 9 would be here
		else
			if [ wava = '0' ]
			then
				echo "ERROR: wava still 0"
				exit
			fi
		fi

                if [ "$wava" = "W" -a "$resa" = "R" ]
                then
                        spur1=`cut -c 43-43 $tmp`                             # spectral purity 1
                        sptype=`cut -c 38-42 $tmp`      # spectrometer range and wavelength set indicator
                        #echo "DEBUG: Wavelength range 1 or 2, sptype= $sptype"

                elif [ "$wavb" = "W" -a "$resb" = "R" ]
                then
                        spur2=`cut -c 41-41 $tmp`                             # spectral purity 2
                        spur3=`cut -c 42-42 $tmp`                             # spectral purity 3
                        spur4=`cut -c 43-43 $tmp`                             # spectral purity 4
                        sptype=`cut -c 36-40 $tmp`      # spectrometer range and wavelength set indicator
                        #echo "DEBUG: Wavelength range 5 or 9, sptype= $sptype"
                else
                        echo "^G           ERROR: wavelength range data not in correct location"
                        echo "ERROR: wavelength range data not in correct location" >> $spcmdf
			echo "       wava= $wava   resa=$resa"
			echo "       wavb= $wavb   resb=$resb"
			cat $tmp
			echo "         111111111122222222223333333333444444"
			echo "123456789012345678901234567890123456789012345"
			echo " "
                fi


		#if   [ "$sptype" = 'W1R1B' ]     # beckman
		if   [ "$achans" = '  480' ]     # beckman
		then
			iwaves=6   # input wavelengths
			iresol=8   # input resolution
			owaves=6   # output wavelengths
			oresol=17  # output resolution
			errinc=2   # increment this many records to get error bars
			chans=480

			echo "==[inwave]Y$iwaves"  >> $cmdfil   # input wavelengths
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "m"                   >> $cmdfil   # go to math

			echo "\######## cubic spline spectrum" >> $cmdfil
			echo "==[Recnum]" $srec   >> $cmdfil
			echo "==[Title]$stitl"    >> $cmdfil
			echo "<work/spcmds.splin.work" >> $cmdfil
			echo "e"                  >> $cmdfil   # go to prog ops


		#elif [ "$sptype" = 'W1R1F' ]     # Field spectrometer
		elif [ "$achans" = ' 2151' ]     # Field spectrometer
		then
			iwaves=10  # input wavelengths
			iresol=16  # input resolution
			owaves=28  # output wavelengths
			oresol=34  # output resolution
			errinc=6   # increment this many records to get error bars
			chans=2151

			echo "\################## copy a spectrum" >> $cmdfil
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "t"                   >> $cmdfil   # go to transfer
			######## copy spectrum
			echo "==[Recnum]" $srec     >> $cmdfil
			echo "[FILEID][Recnum]citv" >> $cmdfil
			echo ";;;;;;b;$owaves "     >> $cmdfil  # set wavelength pointer
			echo "c;$oresol "           >> $cmdfil  # set resolution pointer
			echo "e;e"                  >> $cmdfil  # exit to program ops

		#elif [ "$sptype" = 'W1R4N' ]     # Nicolet spectrometer
		elif [ "$achans" = ' 3325' ]     # Nicolet spectrometer
		then
			iwaves=22  # input wavelengths
			iresol=32  # input resolution
			owaves=40  # output wavelengths
			oresol=50  # output resolution
			errinc=10  # increment this many records to get error bars
			chans=3325

			echo "\################## copy a spectrum" >> $cmdfil
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "t"                   >> $cmdfil   # go to transfer
			######## copy spectrum
			echo "==[Recnum]" $srec     >> $cmdfil
			echo "[FILEID][Recnum]citv" >> $cmdfil
			echo ";;;;;;b;$owaves "     >> $cmdfil  # set wavelength pointer
			echo "c;$oresol "           >> $cmdfil  # set resolution pointer
			echo "e;e"                  >> $cmdfil  # exit to program ops

		#elif [ "$sptype" = 'W2R4N' ]     # Nicolet spectrometer region 2
		elif [ "$achans" = ' 3325' ]     # Nicolet spectrometer region 2
		then
			iwaves=22  # input wavelengths
			iresol=32  # input resolution
			owaves=40  # output wavelengths
			oresol=50  # output resolution
			errinc=10  # increment this many records to get error bars
			chans=3325

			echo "\################## copy a spectrum" >> $cmdfil
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "t"                   >> $cmdfil   # go to transfer
			######## copy spectrum
			echo "==[Recnum]" $srec     >> $cmdfil
			echo "[FILEID][Recnum]citv" >> $cmdfil
			echo ";;;;;;b;$owaves "     >> $cmdfil  # set wavelength pointer
			echo "c;$oresol "           >> $cmdfil  # set resolution pointer
			echo "e;e"                  >> $cmdfil  # exit to program ops

		#elif [ "$sptype" = 'W5R4N' ]     # Nicolet spectrometer region 5
		#elif [ "$sptype" = 'W9R4N' ]     # Nicolet spectrometer region 9
		elif [ "$achans" = ' 4280' ]     # Nicolet spectrometer region 5, 9
		then
			iwaves=42  # input wavelengths
			iresol=54  # input resolution
			owaves=60  # output wavelengths
			oresol=72  # output resolution
			errinc=12  # increment this many records to get error bars
			chans=4280

			echo "\################## copy a spectrum" >> $cmdfil
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "t"                   >> $cmdfil   # go to transfer
			######## copy spectrum
			echo "==[Recnum]" $srec     >> $cmdfil
			echo "[FILEID][Recnum]citv" >> $cmdfil
			echo ";;;;;;b;$owaves "     >> $cmdfil  # set wavelength pointer
			echo "c;$oresol "           >> $cmdfil  # set resolution pointer
			echo "e;e"                  >> $cmdfil  # exit to program ops:w

		#elif [ "$sptype" = 'W1R1A' ]     # AVIRIS spectrometer
		elif [ "$achans" = '  224' ]     # AVIRIS spectrometer
		then
			iwaves=66  # input wavelengths
			iresol=67  # input resolution
			owaves=84  # output wavelengths
			oresol=90  # output resolution
			errinc=1  # increment this many records to get error bars
			chans=224

			echo "==[inwave]Y$iwaves"  >> $cmdfil   # input wavelengths
			echo "==[outwave]V$owaves" >> $cmdfil   # output wavelengths
			echo "m"                   >> $cmdfil   # go to math

			echo "\######## cubic spline spectrum" >> $cmdfil
			echo "==[Recnum]" $srec   >> $cmdfil
			echo "==[Title]$stitl"    >> $cmdfil
			echo "<work/spcmds.splin.work" >> $cmdfil
			echo "e"                  >> $cmdfil   # go to prog ops


		else
			iwaves=0   # input wavelengths
			iresol=0   # input resolution
			owaves=0   # output wavelengths
			oresol=0   # output resolution
			ichans=0
			echo "ERROR: spectrometer type: $achans NOT FOUND"
			echo "ERROR: spectrometer type: $achans NOT FOUND" >> $spcmdf
			echo "Press return to continue"
			read zz

		fi

    
		#echo "$srec $stitl"
		#echo "$stitl2"

        else
                # found a comment or blank line

                echo "# $oneline"
        fi

done


echo 'e;EX' >> $cmdfil
rm $tmp
